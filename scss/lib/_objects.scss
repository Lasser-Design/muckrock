/* Simple Objects */

// Table of Contents
//
// * Mixins
// * Prototypes
//     * Textbox
//        * Button
//        * Panel
//        * input
// * Implementation


// Mixins

@mixin background-gradient($color) {
    //@include background(linear-gradient($color, darken($color, $base-gradient-darken)));
    background: $color;
}

@mixin button-color($color) {
    color: $color;
    border-color: $color;
}

@mixin button-hover($color) {
    &:hover {
        color: $color-white;
        @include background-gradient($color);
    }
    &:focus {
        $focus-color: lighten($color, 10%);
        color: $focus-color;
        border-color: $focus-color;
        &:hover {
            color: $color-white;
        }
    }
    &:active {
        color: $color-white;
        @include background(radial-gradient($color, darken($color, $base-gradient-darken/2)));
    }
}

@mixin panel-color($color, $disabled: false) {
    @if not $disabled {
        color: $color-white;
        @include background-gradient($color);
        border-color: darken($color, 10%);
    } @else {
        color: $color;
        background: none;
    }
}

// Prototypes

// Textbox
%textbox {
    @include box-sizing(border-box);
    border-style: solid;
    border-width: $base-border-width;
    border-radius: $base-border-radius;
    line-height: $base-vertical-rhythm;
}

// Textbox -> Button
%button { @extend %textbox;
    display: inline-block;
    margin: 0.25em 0.325em 0.25em 0;
    padding: $base-vertical-rhythm/4 $base-vertical-rhythm;
    text-decoration: none;
    text-align: center;
}

// Textbox -> Panel
%panel { @extend %textbox;
    display: block;
    margin:  $base-vertical-rhythm/2 0;
    padding: $base-vertical-rhythm/2;
    border-color: $color-grey;
    @include media($large-layout) {
        padding: $base-vertical-rhythm/2 $base-vertical-rhythm;
    }
}

// Textbox -> Input
%input { @extend %textbox;
    display: inline-block;
    padding: $base-vertical-rhythm/4 $base-vertical-rhythm;
    border-color: $color-grey;
    &:disabled {
        background-color: lighten($color-disabled, 25%);
        border: 1px solid $color-disabled;
        color: $color-disabled;
    }
}
   
// Implementation

// Buttons

.button, .button.default { @extend %button;
    @include button-color($color-default);
    @include button-hover($color-default);
}

.button.primary { @extend %button;
    @include button-color($color-primary);
    @include button-hover($color-primary);
}

.button.success { @extend %button;
    @include button-color($color-success);
    @include button-hover($color-success);
}

.button.failure { @extend %button;
    @include button-color($color-failure);
    @include button-hover($color-failure);
}

.button.disabled { @extend %button;
    @include button-color($color-disabled);
    background: none;
}

// Panels

.panel, .panel.default { @extend %panel;
    @include panel-color($color-default);
    a {
        text-decoration: underline;
        color: $color-white;
        background-color: none;
    }
}
.panel.primary { @extend %panel;
    @include panel-color($color-primary);
    a {
        text-decoration: underline;
        color: $color-white;
        background-color: none;
    }
}
.panel.success { @extend %panel;
    @include panel-color($color-success);
    a {
        text-decoration: underline;
        color: $color-white;
        background-color: none;
    }
}
.panel.failure { @extend %panel;
    @include panel-color($color-failure);
    a {
        text-decoration: underline;
        color: $color-white;
        background-color: none;
    }
}

.panel.disabled { @extend %panel;
    @include panel-color($color-disabled, true);
}

// Inputs

#{$all-text-inputs} { @extend %input; }

input[type="submit"], button { @extend .default; background: none;}

#{$all-button-inputs} {
    @include box-sizing(border-box);
    display: block;
    background: none;
}

fieldset {
    label { @extend dfn;
        @include box-sizing(border-box);
        display: block;
        color: $color-default;
        text-align: left;
    }
    
    input + label {
        float: left;
        margin-right: 1.5em;
    }
    
    & > fieldset, & > fieldset + fieldset { margin: 0; }
}

.login { 
    display: inline-block;
    margin: 1.5em 0;
    padding: 0 1.5em;
    border: 1px solid $color-grey;
    border-radius: $base-border-radius;
    fieldset {
        display: inline-block;
        margin: 0.5em 0.75em 1.5em 0;
    }
}

/* Messages */

object.message { @extend %panel;
    $color-sent: $color-primary;
    $color-received: $color-grey;
    $message-layout: new-breakpoint(min-width $large-breakpoint+200px 12);
    @include span-columns(12);
    & > section.meta {
        display: block;
        width: 100%;
        text-align: left;
        line-height: 1em;
        img {
            max-width: 100%;
            width: 50px;
            margin-bottom: 0;
        }
        small {
            display: block;
            margin-top: 0.5em;
        }
        @include fill-parent();
        @include media($message-layout) {
            margin: $base-vertical-rhythm/2 0 $base-vertical-rhythm/2;
            @include span-columns(2 of 12);
            img { max-width: 100%; width: 100%; }
        }
    }
    
    & > section.text {
        display: block;
        @include fill-parent();
        @include media($message-layout) {
            @include span-columns(9 of 12);
            @include shift(1 of 12);
        } 
    }

    &.received {
        border-color: $color-received;
        > section.text { border-top-color: $color-received; }
        /*@include media($large-layout) {
            > section.meta {
                float: right;
                @include pad(0 0 0 default);
            }
        }*/
    }
    
    &.sent {
        border-color: $color-sent;
        > section.text { border-top-color: $color-sent; }
        /*@include media($large-layout) {
            > section.meta {
                text-align: right;
            }
        }*/
    }
}

/* Feeds */

.feed-item { @extend %panel;
    overflow: hidden;
    @include fill-parent();
    > header {
        display: block;
        width: 100%;
        margin-bottom: $base-vertical-rhythm/2;
        float: left;
        div {
            display: block;
            & + div { 
                @include font-sizing(0.9, 1);
            }
        }
    }
    .button {
        @include font-sizing(0.9, 1);
        line-height: 1.5em;
        float: left;
    }
}

.feed {
    
    ul, ol {
        list-style-type: none;
        padding-left: 0;
    }

    .feed-item {
        margin: 0;
        border-top: none;
        border-radius: 0;
    }
    
    li:first-child > .feed-item {
        border-top: $base-border-width solid $color-grey;
        @include border-top-radius($base-border-radius);
    }
    
    li:last-child > .feed-item {
        @include border-bottom-radius($base-border-radius);
    }

    @include media($large-layout) {
        @include span-columns(6);
        &.narrow { @include span-columns(4); }
        &.wide { @include span-columns(8); }
    }
    @include fill-parent();

}

/* Progress Bar */

$progress-meter-border: $base-border-width solid darken($color-primary, 15%);
$progress-animation-duration: 0.7s;

object.progress-bar {
    display: block;
    width: 100%;
    height: auto;
    margin: $base-vertical-rhythm/2 0;
    border: $base-border-width solid $color-grey;
    border-radius: $base-border-radius + $base-border-width;
    background-color: $color-white;
}

.meter {
    @include box-sizing(border-box);
    display: block;
    height: $base-vertical-rhythm;
    @include background-gradient($color-default);
    border: $progress-meter-border;
    border-radius: $base-border-radius;
    @include border-right-radius(0px);
    &.completed { @include border-right-radius($base-border-radius); }
    @mixin classifier($status, $color) {
        &.#{$status} {
            @include background-gradient($color);
            border: 1px solid darken($color, 15%);
        }
    }
    @include classifier(success, $color-success);
    @include classifier(failure, $color-failure);
    @include classifier(primary, $color-primary);
    @include classifier(default, $color-default);
    @include classifier(disabled, $color-disabled);
}

/* Table */

table {
    width: 100%;
    margin: 1.5em 0;
    border-radius: $base-border-radius;
    th, td { padding: 0.25em 0.5em; }
    tr.odd { background-color: darken($color-white, 5%); }
    &, th, td {
        border-top: $base-border-width solid $color-grey;
        border-bottom: $base-border-width solid $color-grey
    }
}


/* Article */
.post, .question, .request, .jurisdiction, .agency { @extend %article; }
.post {
    p:first-of-type {
        @include media($medium-layout) { @include font-sizing(1.2); }
    }
    aside dl { @include span-columns(2 of 6); }
    section { border-top: 0; }
}
.jurisdiction {
    h3 { font-weight: normal; }
    h3 + table { margin-top: 0; }
    h3 + h3 { margin-top: 1.5em; }
    aside dl { @extend %half; @include omega(2n); }
}
.agency {
    figure { @extend %full; }
    aside div.dl-group { @extend %full; @include pad(default 0 0 0);}
    aside dl { @extend %third; @include omega(3n); }
    //aside dd > small { text-transform: uppercase; }
    aside dd + dt { margin-top: $base-vertical-rhythm; }
}